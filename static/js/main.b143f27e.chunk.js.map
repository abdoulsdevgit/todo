{"version":3,"sources":["components/Main/Main.module.css","components/todo/Todo.module.css","components/todo/Todo.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","checked","value","isChecked","styles","console","log","className","wrapper","container","contentDisplay","onClick","handleCheck","todoValue","controls","onEdit","icon","faPencilAlt","control","handleDelete","faTrash","Main","handleChange","event","setState","input","target","addTodo","key","state","trim","checkForEdit","editedArray","todos","editedIndex","isEdited","oldState","isEdit","newTodo","handleEdit","index","forEach","e","createTodo","splice","i","length","todo","trailer","temp","main","this","onChange","onKeyPress","map","x","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b143f27e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__1S6Tc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todo_container__8X1VH\",\"wrapper\":\"Todo_wrapper__164Eh\",\"controls\":\"Todo_controls__35Xeu\",\"contentDisplay\":\"Todo_contentDisplay__1P7oS\",\"todoValue\":\"Todo_todoValue__3npeD\",\"cross\":\"Todo_cross__3cCX6\",\"checked\":\"Todo_checked__Rj85s\",\"control\":\"Todo_control__2SV2V\"};","import React from 'react';\r\nimport styles from './Todo.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faTrash, faPencilAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nfunction Todo(props) {\r\n\r\n    let checked = props.value.isChecked ? styles.checked: null;\r\n    console.log(`Handle check in todo clicked ${props.value.isChecked}`);\r\n    return(\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.container}>\r\n                <div className={styles.contentDisplay}>\r\n                    <h1 onClick={() => props.handleCheck()} className={`${checked} ${styles.todoValue}`} >{props.value.value}</h1>\r\n                </div>\r\n                \r\n                <div className={styles.controls}>\r\n                    {/* <button onClick={() => props.onEdit()}> Edit </button> */}\r\n                    <FontAwesomeIcon onClick={() => props.onEdit()} icon={faPencilAlt} className={styles.control} />\r\n                    <FontAwesomeIcon onClick={() => props.handleDelete()} icon={faTrash} className={styles.control}  />\r\n                    {/* <button onClick={() => props.handleDelete()}> Delete </button> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, {Component} from 'react';\r\nimport styles from './Main.module.css';\r\nimport Todo from '../todo/Todo';\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: \"\",\r\n            todos: [this.newTodo(\"first\")],\r\n            editedIndex: -1,\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={styles.main}>\r\n                <input \r\n                    value={this.state.input}\r\n                    onChange={this.handleChange}\r\n                    onKeyPress={this.addTodo}\r\n                />\r\n\r\n\r\n                <h1>{this.state.todos.length} Todos</h1>\r\n\r\n                {this.state.todos.map((x, index) => this.createTodo(index))}\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({input: event.target.value});\r\n    }\r\n    \r\n    addTodo = (event) => {\r\n        if(event.key === \"Enter\") {\r\n\r\n            // do nothing if input field is empty and user pushes Enter.\r\n            if(this.state.input === null || this.state.input.trim() === '') {\r\n                return;\r\n            }\r\n\r\n            if(this.checkForEdit()) {\r\n                \r\n                const editedArray = [...this.state.todos];\r\n                editedArray[this.state.editedIndex].value = this.state.input;\r\n                editedArray[this.state.editedIndex].isEdited = false;\r\n                this.setState(oldState => ({\r\n                    isEdit: !oldState.isEdit,\r\n                    todos: editedArray,\r\n                    input: \"\"\r\n                }));\r\n\r\n            } else {\r\n\r\n                this.setState({\r\n                    todos: [...this.state.todos, this.newTodo(this.state.input)],\r\n                    input: \"\",\r\n                })\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    newTodo = (value) => {\r\n        return  {\r\n            isChecked: false,\r\n            isEdited: false,\r\n            value,\r\n        };\r\n    }\r\n\r\n    // called by the child edit button\r\n    handleEdit = (index) => {\r\n\r\n        const todos = [...this.state.todos];\r\n        todos.forEach(e => e.isEdited = false);\r\n        todos[index].isEdited = !todos[index].isEdited;\r\n\r\n        this.setState( oldState => ({\r\n            input: oldState.todos[index].value,\r\n            editedIndex: index,\r\n            todos,\r\n        }));\r\n        console.log(\"Edit Clicked\"); // TODO: delete this\r\n    }\r\n\r\n    // creates todo with the given index.\r\n    createTodo = (index) => {\r\n\r\n        return (\r\n            <Todo \r\n                key={index}\r\n                value={this.state.todos[index]}\r\n                onEdit={() => this.handleEdit(index)}\r\n                handleDelete={() => this.handleDelete(index)}\r\n                handleCheck={() => this.handleCheck(index)}\r\n            />\r\n        )\r\n    }\r\n\r\n    // delete's a todo\r\n    handleDelete = (index) =>  {\r\n        \r\n        const todos = [...this.state.todos];\r\n        todos.splice(index, 1);\r\n\r\n        this.setState({\r\n            todos,\r\n            input: \"\",\r\n        });\r\n    }\r\n\r\n    // this checks for a todo\r\n    checkForEdit = () => {\r\n        for(let i = 0; i < this.state.todos.length; i++) {\r\n            let todo = this.state.todos[i];\r\n            if(todo.isEdited) {\r\n                return todo;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // when checked move it at the bottom of the list\r\n    handleCheck = (index) => {\r\n        const todos = [...this.state.todos];\r\n        todos[index].isChecked = !todos[index].isChecked;\r\n        // TODO: rearrange checked and unchecked;\r\n        let trailer = 0;\r\n        \r\n        // this moves all checked todos down the list\r\n        for(let i = 0; i < this.state.todos.length; i++) {\r\n\r\n            if(!todos[i].isChecked) {\r\n                let temp = todos[i];\r\n                todos[i] = todos[trailer];\r\n                todos[trailer] = temp;\r\n                trailer++;\r\n            } else {\r\n                // TODO: put a counter here if you want to count number\r\n                // of checked todos\r\n            }\r\n        }\r\n\r\n        this.setState({todos});\r\n        //TODO: delet this too\r\n        console.log(`Handle check clicked ${todos[index].isChecked}`);\r\n\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\n/** if you click edit you set all of the other todos edit to false\r\n * the set the current todo edit to true.\r\n */","import React from 'react';\r\nimport Main from './components/Main/Main';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}